sdk () {
	COMMAND="$1"
	QUALIFIER="$2"
	case "$COMMAND" in
		(l) COMMAND="list"  ;;
		(ls) COMMAND="list"  ;;
		(v) COMMAND="version"  ;;
		(u) COMMAND="use"  ;;
		(i) COMMAND="install"  ;;
		(rm) COMMAND="uninstall"  ;;
		(c) COMMAND="current"  ;;
		(ug) COMMAND="upgrade"  ;;
		(d) COMMAND="default"  ;;
		(h) COMMAND="home"  ;;
		(e) COMMAND="env"  ;;
	esac
	if [[ "$COMMAND" != "update" ]]
	then
		___sdkman_check_candidates_cache "$SDKMAN_CANDIDATES_CACHE" || return 1
	fi
	SDKMAN_AVAILABLE="true"
	if [ -z "$SDKMAN_OFFLINE_MODE" ]
	then
		SDKMAN_OFFLINE_MODE="false"
	fi
	__sdkman_update_service_availability
	if [ -f "${SDKMAN_DIR}/etc/config" ]
	then
		source "${SDKMAN_DIR}/etc/config"
	fi
	if [[ -z "$COMMAND" ]]
	then
		___sdkman_help
		return 1
	fi
	CMD_FOUND=""
	if [[ "$COMMAND" != "selfupdate" || "$sdkman_selfupdate_feature" == "true" ]]
	then
		CMD_TARGET="${SDKMAN_DIR}/src/sdkman-${COMMAND}.sh"
		if [[ -f "$CMD_TARGET" ]]
		then
			CMD_FOUND="$CMD_TARGET"
		fi
	fi
	CMD_TARGET="${SDKMAN_DIR}/ext/sdkman-${COMMAND}.sh"
	if [[ -f "$CMD_TARGET" ]]
	then
		CMD_FOUND="$CMD_TARGET"
	fi
	if [[ -z "$CMD_FOUND" ]]
	then
		echo ""
		__sdkman_echo_red "Invalid command: $COMMAND"
		echo ""
		___sdkman_help
	fi
	if [[ -n "$QUALIFIER" && "$COMMAND" != "help" && "$COMMAND" != "offline" && "$COMMAND" != "flush" && "$COMMAND" != "selfupdate" && "$COMMAND" != "env" && "$COMMAND" != "completion" && "$COMMAND" != "edit" && "$COMMAND" != "home" && -z $(echo ${SDKMAN_CANDIDATES[@]} | grep -w "$QUALIFIER") ]]
	then
		echo ""
		__sdkman_echo_red "Stop! $QUALIFIER is not a valid candidate."
		return 1
	fi
	if [[ "$COMMAND" == "offline" && -n "$QUALIFIER" && -z $(echo "enable disable" | grep -w "$QUALIFIER") ]]
	then
		echo ""
		__sdkman_echo_red "Stop! $QUALIFIER is not a valid offline mode."
	fi
	local final_rc=0
	local native_command="${SDKMAN_DIR}/libexec/${COMMAND}"
	if [ -f "$native_command" ]
	then
		"$native_command" "${@:2}"
	elif [ -n "$CMD_FOUND" ]
	then
		local converted_command_name=$(echo "$COMMAND" | tr '-' '_')
		__sdk_"$converted_command_name" "${@:2}"
	fi
	final_rc=$?
	return $final_rc
}